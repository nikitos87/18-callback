// Задание #1

// 1. помещает console.log в callback queue
// 5. возвращается в callback queue, достает это, помещает в call stack, выполняет, и удаляет из call stack - соответственно setTimeout - 4-я строчка, которая выведится в консоль
setTimeout(() => {
  console.log("setTimeout");
}, 0);

// 2. макрозадача - выводит в консоль слово Promise - соответственно - это первое что будет выведено в консоль
const promise = new Promise((resolve) => {
  console.log("Promise");
  resolve();
});

// 3. микрозадача, созданная Промисом, ее движок поместит в microtask queue, и соответственно это задача выполнится сразу после макрозадачи - то есть Promise resolve - это третья строчка, которая выведится в консоль
promise.then(() => {
  console.log("Promise resolve");
});

// 4. макрозадача - самая главная макрозадача - это выполнение кода, то есть когда код идет от первой строчки до последней соответсвенно End - это вторая строчка, которая выведится в консоль
console.log("End");

/*
Итого по заданию 1, будет вывод в следующем порядке:
Promise
End
Promise resolve
setTimeout

????? Вопрос: в видео-лекции говорилось про порядок вызова у Event Loop - и по этой логике, ответ как выше, и так и выводится в консоль если запустить код,
но текстовой лекции было написано, что сразу после КАЖДОЙ макрозадачи движок выполняет все задачи из очереди микрозадач перед тем как выполнить следующую макрозадачу.
Соответственно вопрос весь код от первой строчки до последней - это считается как ОДНА макрозадача? Потому что после первой макрозадачи Promise кажется что должна выполниться микрозадача Promise resolve, и только затем переходить к следующей макрозадачи слову End. Чуть-чуть сбивает значение слова КАЖДОЙ макрозадачи. Что подразумевается под КАЖДОЙ макрозадачей? Спасибо.
*/
